# -*- coding: utf-8 -*-
"""Homework3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JhsdmXn9GOp0sNo8DgQBzK4hfdZpkmge
"""

from google.colab import drive
drive.mount('/content/drive')

import time
import numpy as np
from skimage import io
import matplotlib.pyplot as plt

def normalize_data(data):
    return data / 255.0

def euclidean_distance(a, b):
    return np.linalg.norm(a - b)

def kmeans(data, k, centroids, max_iterations=50):
    data_size, features = data.shape
    cluster_assignments = np.zeros(data_size, dtype=int)
    centroids = np.array(centroids)

    for iteration in range(max_iterations):
        for i in range(data_size):
            distances = [euclidean_distance(data[i], centroid) for centroid in centroids]
            cluster_assignments[i] = np.argmin(distances)

        new_centroids = [np.mean(data[cluster_assignments == j], axis=0) for j in range(k)]
        if np.allclose(centroids, new_centroids, rtol=1e-4, atol=1e-4):  # Check for convergence
            break

        centroids = new_centroids

    return cluster_assignments, centroids

def recolor_clusters(img, assignments):
    colors = {
        0: (60, 179, 113),
        1: (0, 191, 255),
        2: (255, 255, 0),
        3: (255, 0, 0),
        4: (0, 0, 0),
        5: (169, 169, 169),
        6: (255, 140, 0),
        7: (128, 0, 128),
        8: (255, 192, 203),
        9: (255, 255, 255)
    }

    colored_img = np.zeros_like(img)
    for i in range(10):
        mask = (assignments == i).reshape(img.shape[:-1])  # Reshape mask to match image dimensions
        colored_img[mask] = colors[i]

    return colored_img

def calculate_sse(data, assignments, centroids):
    sse = np.sum([euclidean_distance(data[i], centroids[assignments[i]]) ** 2
                  for i in range(len(assignments))])
    return sse

def main():
    img_path = '/content/drive/MyDrive/Homework3/image.png'
    img = io.imread(img_path)
    io.imshow(img)
    plt.show()

    normalized_img = normalize_data(img.reshape((-1, 3)))
    k_values = [2, 3, 6, 10]

    for k in k_values:
        starting_centroids = [(i / 10.0, i / 10.0, i / 10.0) for i in range(k)]
        assignments, final_centroids = kmeans(normalized_img, k, starting_centroids)

        sse = calculate_sse(normalized_img, assignments, final_centroids)

        colored_img = recolor_clusters(img, assignments)

        io.imsave(f'clustered_image_k{k}.png', colored_img)

        print(f'For k={k}, Final SSE: {sse}')

        io.imshow(colored_img)
        plt.show()

        time.sleep(1)

if __name__ == "__main__":
    main()